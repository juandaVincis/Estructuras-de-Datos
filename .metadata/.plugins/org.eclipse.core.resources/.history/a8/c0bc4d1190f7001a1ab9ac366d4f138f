package PilasyColas;

public class QueueArray<T> {
	private int tail=0, head = 0, count = 0, size=0;
	private T[] qarray;
	
	public QueueArray(int n) {

		this.head = 0;
		this.tail = 0;
		this.count = 0;
		this.size=n;
		this.qarray = (T[]) new Object[size];
	}
	
	public QueueArray() {
		head = tail = count = 0;
		qarray = (T[]) new Object[5];
	}
	
	public T[] array() {
		return qarray;
	}
	
	
	public boolean existChar(T item) {
		for(int i=head;i!=tail;i=(i+1)%size) {
			if((char)qarray[(head+i)%size] == (char)item) {
				return true;
			}
		}
		return false;
	}
	
	public T dequeue() {
		T item = null;
		if(empty())
			System.out.println("Queue is empty: item not dequeued");
		else {
			item = qarray[head];
			head = (head + 1) % size;
			count--; 
		} 
		return item;
	}
	
	public T pop() {
		T item = null;
		if(empty())
			System.out.println("Queue is empty: item not dequeued");
		else {
			item = qarray[(((tail-1) % size) + size) % size];
			tail = ((((tail-1) % size) + size) % size);
			count--; 
		} 
		return item;
	}
	
	public T peekPop() {
		T item = null;
		if(empty())
			System.out.println("Queue is empty: item not dequeued");
		else {
			item = qarray[(((tail-1) % size) + size) % size];
		}
		return item;
	}
	
	public T peek() {
		T item = null;
		if(empty())
			System.out.println("Queue is empty: item not dequeued");
		else {
			item = qarray[head];
		}
		return item;
	}
	
	public void enqueue(T item) {
		if(full())
			System.out.println("Queue is full: item not enqueued");
		else {
			qarray[tail] = item;
			tail = (tail + 1) % size;
			count++;
		} 
	} 
	public boolean empty() {
		return count <= 0;
	} 
	public boolean full() {
		return count >= size;
	} 
	public int getCount() {
		return count;
	} 
	
	public void clone(QueueArray<T> E) {
		this.head = E.head;
		this.tail = E.tail;
		this.size = E.size;
		this.count = E.count;
		for(int i = 0;i<E.qarray.length;i++) {
			this.qarray[i] = E.qarray[i];
		}
	}
	
	public void clear(int n) {
		this.head = 0;
		this.tail = 0;
		this.count = 0;
		this.size=n;
		this.qarray = (T[]) new Object[size];
	}
	
	public void eliminate(T item) {
		int siz = this.count;
		for(int i = 0;i<siz;i++) {
			if((char)this.peek() == (char)item)
				this.dequeue();
			else
				this.enqueue(this.dequeue());
		}
	}
	
	public String toString() {
		String s = "";
		int siz = this.count;
		for(int i=0;i<siz;i++) {
			s+=this.qarray[head+i];
		}
		//System.out.println(s);
		return s;
	}
	
	
}

package PilasyColas;

import java.util.Scanner;

public class funGames2 {
	
	 public static String getSmallestAndLargest(String s, int k) 
	    { 
	        // Initialize min and max as first substring of size k 
	        String currStr = s.substring(0, k); 
	        String lexMin = currStr; 
	        String lexMax = currStr; 
	   
	        // Consider all remaining substrings. We consider 
	        // every substring ending with index i. 
	        for (int i = k; i < s.length(); i++) { 
	            currStr = currStr.substring(1, k) + s.charAt(i); 
	            if (lexMax.compareTo(currStr) < 0)      
	                 lexMax = currStr; 
	            if (lexMin.compareTo(currStr) > 0) 
	                 lexMin = currStr;             
	        } 
	  
	        // Print result. 
	        return lexMin; 

	    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		
		QueueArray<Character> qOriginal = new QueueArray<>(str.length());
		QueueArray<Character> qCopy = new QueueArray<>(str.length());
		QueueArray<Character> qCore = new QueueArray<>(30);
		QueueArray<Character> qSubq = new QueueArray<>(30);
		QueueArray<Character> qSubqCopy = new QueueArray<>(30);
		QueueArray<QueueArray> qAnswer = new QueueArray<>(100);
		
		for(int i =0; i<str.length();i++) {
			Character c = new Character(str.toCharArray()[i]);
			qOriginal.enqueue(c);
		}
		
		/**qOriginal.enqueue(qOriginal.dequeue());
		
		qOriginal.eliminate('a');
		
		while(!qOriginal.empty()) {
			System.out.println(qOriginal.dequeue());
		}**/
		
		qCopy.clone(qOriginal);
		qAnswer.enqueue(qSubq);
		qSubq.clone(qCore);
		
		while(!qCopy.empty()){
			if(qCore.existChar(qCopy.peek())){
				qCopy.dequeue();
			}else
				qCore.enqueue(qCopy.dequeue());
		}
		
		qCopy.clone(qOriginal);
		

		
		while(!qOriginal.empty()) {
			char c = qOriginal.dequeue();
			int size =qAnswer.getCount();
			if(!qAnswer.peek().existChar(c)) {
				for(int i = 0;i<qAnswer.getCount();i++) {
					QueueArray<Character> qSubqCopy2 = new QueueArray<>(30);
					qSubqCopy2.clone(qAnswer.dequeue());
					qSubqCopy2.enqueue(c);
					qAnswer.enqueue(qSubqCopy2);
				}
			}else {
				
				for(int i = 0;i<size;i++) {
					QueueArray<Character> qSubqCopy2 = new QueueArray<>(30);
					QueueArray<Character> qSubqCopy3 = new QueueArray<>(30);
					qSubqCopy2.clone(qAnswer.dequeue());
					qSubqCopy3.clone(qSubqCopy2);
					
					qSubqCopy3.eliminate(c);
					qSubqCopy3.enqueue(c);
					String s1 =qSubqCopy2.toString();
					String s2 = qSubqCopy3.toString();
					if(s1.compareTo(s2)<0)
						System.out.println("c".compareTo("b"));
					qAnswer.enqueue(qSubqCopy2);
					//else
						//qAnswer.enqueue(qSubqCopy3);

				}
			}
			
		}
		
		
		while(!qAnswer.empty()) {
			System.out.println(qAnswer.dequeue());
		}
		

	}

}
